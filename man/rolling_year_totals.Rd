% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rolling_year_totals.R
\name{rolling_year_totals}
\alias{rolling_year_totals}
\title{Rolling year-ending totals from quarterly data}
\usage{
rolling_year_totals(
  data,
  date_col,
  value_col,
  out_col = year_total,
  .group_vars = NULL,
  engine = c("cumsum", "lag", "stats"),
  window = 4L,
  .complete = TRUE,
  na_rm = TRUE
)
}
\arguments{
\item{data}{A data frame or tibble.}

\item{date_col}{Column holding quarter-end dates (unquoted).}

\item{value_col}{Numeric column to sum (unquoted).}

\item{out_col}{Name for the output column (unquoted). Default: `year_total`.}

\item{.group_vars}{Optional character vector of columns to group by.}

\item{engine}{Which computation method to use: one of
\code{"cumsum"}, \code{"lag"}, \code{"stats"}.
\itemize{
  \item \strong{"cumsum"}: fast and base-friendly: rolling sum via
    cumulative sums (\code{cs - lag(cs, 4)}).
  \item \strong{"lag"}: explicit sum of \code{x + lag(x,1..3)}.
  \item \strong{"stats"}: uses \code{stats::filter()} convolution.
}
Default is \code{"cumsum"}.}

\item{window}{Integer window length (default 4 for quarters). You can change
this if you ever need different window sizes.}

\item{.complete}{Logical; if \code{TRUE} (default) the first \code{window-1}
rows per group are set to \code{NA} so only complete windows are returned.
If \code{FALSE}, partial sums are kept.}

\item{na_rm}{Logical; if \code{TRUE} (default) treat \code{NA} in the value
column as zeros for the purpose of summation. Set \code{FALSE} to propagate
\code{NA}s into the rolling sum.}
}
\value{
A tibble with an added column named \code{out_col}.
}
\description{
Computes rolling sums over the last 4 quarters (a "year-ending" total) for a
value column, optionally within groups. You can choose a computation engine
that relies only on base R + dplyr (`"cumsum"` or `"lag"`), or base `stats`
(`"stats"`). The function arranges by the date column within each group.
}
\examples{
df <- tibble::tibble(
  Date = seq.Date(as.Date("2023-03-31"), by = "3 months", length.out = 8),
  Claims = c(100, 120, 90, 110, 95, 130, 105, 115),
  Region = rep(c("North", "South"), each = 4)
)

# Default (cumsum engine), grouped by Region, custom output name
rolling_year_totals(df, Date, Claims, out_col = rolling_yr, .group_vars = "Region")

# Using the base stats engine
rolling_year_totals(df, Date, Claims, out_col = yr_total, engine = "stats")

}
